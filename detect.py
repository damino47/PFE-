import os
import cv2
import numpy as np
import easyocr
from ultralytics import YOLO
import torch
from PIL import Image, ImageEnhance
import datetime
import arabic_reshaper
from bidi.algorithm import get_display
from typing import List, Tuple
import re

class ParkingDetector:
    def __init__(self, confidence_threshold: float = 0.25):
        """Initialise le d√©tecteur de plaques d'immatriculation.
        Args:
            confidence_threshold (float): Seuil de confiance pour la d√©tection (0-1)
        """
        try:
            # Rechercher le mod√®le YOLOv8 dans diff√©rents emplacements
            possible_model_paths = [
                os.path.join(os.path.dirname(__file__), "weights", "weights", "best.pt"),
                os.path.join(os.path.dirname(__file__), "YOLOv8", "runs", "detect", "train10", "weights", "best.pt"),
                os.path.join(os.path.dirname(__file__), "YOLOv8", "YOLOv8", "model", "best.pt")
            ]
            
            # Trouver le mod√®le le plus r√©cent
            latest_model = None
            latest_time = 0
            
            print("\nüîç Recherche du mod√®le YOLOv8...")
            for path in possible_model_paths:
                if os.path.exists(path):
                    mod_time = os.path.getmtime(path)
                    print(f"  üìÅ Trouv√©: {path}")
                    print(f"     ‚îî‚îÄ Derni√®re modification: {datetime.datetime.fromtimestamp(mod_time).strftime('%Y-%m-%d %H:%M:%S')}")
                    if mod_time > latest_time:
                        latest_time = mod_time
                        latest_model = path
            
            if latest_model is None:
                print("\n‚ùå ERREUR: Aucun mod√®le YOLOv8 trouv√©!")
                print("‚ÑπÔ∏è Pour utiliser votre mod√®le entra√Æn√© sur Google Colab:")
                print("   1. Cr√©ez un dossier 'weights' dans le r√©pertoire principal")
                print("   2. Copiez votre fichier 'best.pt' dans weights/weights/")
                print("   3. Assurez-vous d'avoir tous les fichiers de configuration")
                raise FileNotFoundError("Mod√®le YOLOv8 introuvable. Veuillez suivre les instructions ci-dessus.")
            
            self.model_path = latest_model
            print(f"\n‚úÖ Utilisation du mod√®le le plus r√©cent: {self.model_path}")
            
            # Configurer le device (GPU/CPU)
            self.device = 'cuda' if torch.cuda.is_available() else 'cpu'
            print(f"üíª Device: {self.device.upper()}")
            
            # Charger le mod√®le YOLOv8
            print("‚åõ Chargement du mod√®le YOLOv8...")
            try:
                self.model = YOLO(self.model_path)
                # Tester le mod√®le avec une petite image
                test_img = np.zeros((100, 100, 3), dtype=np.uint8)
                self.model(test_img)
                print("‚úÖ Mod√®le YOLOv8 charg√© et test√© avec succ√®s!")
            except Exception as model_error:
                print(f"\n‚ùå ERREUR lors du chargement du mod√®le YOLOv8: {str(model_error)}")
                print("‚ÑπÔ∏è V√©rifiez que:")
                print("   1. Le fichier best.pt est un mod√®le YOLOv8 valide")
                print("   2. Le mod√®le a √©t√© entra√Æn√© pour la d√©tection d'objets")
                print("   3. Tous les fichiers n√©cessaires ont √©t√© copi√©s depuis Google Colab")
                raise
            
            # Initialiser EasyOCR
            print("\n‚åõ Initialisation d'EasyOCR...")
            try:
                self.reader = easyocr.Reader(
                    ['ar', 'en'],
                    gpu=torch.cuda.is_available(),
                    model_storage_directory=os.path.join(os.path.dirname(__file__), 'models'),
                    download_enabled=True,
                    recog_network='standard'
                )
                print("‚úÖ EasyOCR initialis√© avec succ√®s!")
            except Exception as ocr_error:
                print(f"\n‚ùå ERREUR lors de l'initialisation d'EasyOCR: {str(ocr_error)}")
                print("‚ÑπÔ∏è V√©rifiez que:")
                print("   1. Vous avez une connexion internet stable")
                print("   2. Vous avez assez d'espace disque")
                print("   3. Les mod√®les EasyOCR ne sont pas corrompus")
                raise
            
            # Param√®tres de d√©tection
            self.confidence_threshold = confidence_threshold
            self.min_plate_ratio = 1.8  # Rapport largeur/hauteur minimal pour une plaque
            self.max_plate_ratio = 5.0  # Rapport largeur/hauteur maximal
            self.min_width = 800       # Largeur minimale de l'image
            self.max_width = 1920      # Largeur maximale de l'image
            
            # Expression r√©guli√®re pour valider le format des plaques tunisiennes
            self.tunisian_plate_pattern = r'^\d{3,4}\d{3,4}$'
            
            print("\n‚úÖ Initialisation termin√©e avec succ√®s!")
            print(f"‚ÑπÔ∏è Configuration:")
            print(f"   üéØ Seuil de confiance: {self.confidence_threshold}")
            print(f"   üìè Ratio min/max plaque: {self.min_plate_ratio}/{self.max_plate_ratio}")
            print(f"   üì∑ Dimensions image: {self.min_width}-{self.max_width}px")
            
        except Exception as e:
            print(f"\n‚ùó ERREUR CRITIQUE: {str(e)}")
            raise
            
        def clean_text(self, text: str) -> str:
            """Nettoie le texte d√©tect√©.
            
            Args:
                text (str): Texte √† nettoyer
                
            Returns:
                str: Texte nettoy√©
            """
            # Supprimer tous les caract√®res non num√©riques
            cleaned = ''.join(c for c in text if c.isdigit())
            return cleaned
            
        def process_tunisian_plate(self, text: str) -> tuple[bool, str]:
            """Traite sp√©cifiquement les plaques tunisiennes
            
            Args:
                text (str): Texte √† traiter
                
            Returns:
                tuple[bool, str]: (True, num√©ro) si plaque valide, (False, "") sinon
            """
            # Nettoyer le texte pour ne garder que les chiffres
            cleaned_text = self.clean_text(text)
            
            # V√©rifier si nous avons assez de chiffres
            if len(cleaned_text) < 7 or len(cleaned_text) > 8:
                return False, ""
                
            # S√©parer en deux parties: 3 premiers chiffres et 4 derniers
            if len(cleaned_text) == 7:
                first_part = cleaned_text[:3]
                second_part = cleaned_text[3:]
            else:  # len == 8
                first_part = cleaned_text[:4]
                second_part = cleaned_text[4:]
            
            # Former le num√©ro de plaque au format tunisien
            formatted_plate = f"{first_part} ÿ™ŸàŸÜÿ≥ {second_part}"
            
            return True, formatted_plate

    def enhance_plate_region(self, img: np.ndarray) -> np.ndarray:
        try:
            # Convertir en niveaux de gris
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            
            # Am√©liorer le contraste global
            lab = cv2.cvtColor(img, cv2.COLOR_BGR2LAB)
            l, a, b = cv2.split(lab)
            clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8,8))
            l = clahe.apply(l)
            lab = cv2.merge((l,a,b))
            enhanced = cv2.cvtColor(lab, cv2.COLOR_LAB2BGR)
            
            # R√©duire le bruit avec un filtre bilat√©ral
            denoised = cv2.bilateralFilter(enhanced, 9, 75, 75)
            
            # Convertir en niveaux de gris apr√®s l'am√©lioration
            gray = cv2.cvtColor(denoised, cv2.COLOR_BGR2GRAY)
            
            # Am√©liorer les bords avec un filtre de Sobel
            sobelx = cv2.Sobel(gray, cv2.CV_64F, 1, 0, ksize=3)
            sobely = cv2.Sobel(gray, cv2.CV_64F, 0, 1, ksize=3)
            edges = cv2.magnitude(sobelx, sobely)
            edges = cv2.normalize(edges, None, 0, 255, cv2.NORM_MINMAX, cv2.CV_8U)
            
            # Binarisation adaptative
            binary = cv2.adaptiveThreshold(
                gray,
                255,
                cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
                cv2.THRESH_BINARY,
                15,
                5
            )
            
            # Combiner les r√©sultats
            result = cv2.addWeighted(binary, 0.7, edges, 0.3, 0)
            
            # Nettoyer avec des op√©rations morphologiques
            kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (3,3))
            morph = cv2.morphologyEx(result, cv2.MORPH_CLOSE, kernel)
            
            return cv2.cvtColor(morph, cv2.COLOR_GRAY2BGR)
            
        except Exception as e:
            print(f'Erreur lors de l\'am√©lioration de l\'image: {str(e)}')
            return img  # Retourner l'image originale en cas d'erreur
            print(f'Erreur lors de l\'am√©lioration de l\'image: {str(e)}')
            return img

    def resize_image(self, image: np.ndarray) -> np.ndarray:
        """Redimensionne l'image selon les dimensions minimales et maximales.
        
        Args:
            image (np.ndarray): Image √† redimensionner
            
        Returns:
            np.ndarray: Image redimensionn√©e
        """
        try:
            height, width = image.shape[:2]
            
            if width < self.min_width:
                scale = self.min_width / width
                image = cv2.resize(image, None, fx=scale, fy=scale)
            elif width > self.max_width:
                scale = self.max_width / width
                image = cv2.resize(image, None, fx=scale, fy=scale)
                
            return image
            
        except Exception as e:
            print(f"Erreur lors du redimensionnement: {str(e)}")
            return image

    def remove_shadows(self, img: np.ndarray) -> np.ndarray:
        """Supprime les ombres de l'image"""
        rgb_planes = cv2.split(img)
        result_planes = []
        
        for plane in rgb_planes:
            dilated = cv2.dilate(plane, np.ones((7,7), np.uint8))
            bg_img = cv2.medianBlur(dilated, 21)
            diff_img = 255 - cv2.absdiff(plane, bg_img)
            result_planes.append(diff_img)
            
        return cv2.merge(result_planes)

    def correct_skew(self, img: np.ndarray) -> np.ndarray:
        """Corrige l'inclinaison de l'image"""
        try:
            # Convertir en niveaux de gris si n√©cessaire
            if len(img.shape) == 3:
                gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            else:
                gray = img
            
            # D√©tecter les contours
            edges = cv2.Canny(gray, 50, 150, apertureSize=3)
            lines = cv2.HoughLines(edges, 1, np.pi/180, 100)
            
            if lines is not None:
                # Trouver l'angle dominant
                angles = []
                for rho, theta in lines[0]:
                    angle = theta * 180 / np.pi
                    if angle < 45:
                        angles.append(angle)
                    elif angle > 135:
                        angles.append(angle - 180)
                
                if angles:
                    median_angle = np.median(angles)
                    if abs(median_angle) > 0.5:  # Corriger seulement si l'angle est significatif
                        # Rotation de l'image
                        (h, w) = img.shape[:2]
                        center = (w // 2, h // 2)
                        M = cv2.getRotationMatrix2D(center, median_angle, 1.0)
                        rotated = cv2.warpAffine(img, M, (w, h), flags=cv2.INTER_CUBIC, borderMode=cv2.BORDER_REPLICATE)
                        return rotated
            
            return img
        except Exception as e:
            print(f'Erreur lors de la correction de l\'inclinaison: {str(e)}')
            return img
            
    def preprocess_plate(self, plate_region: np.ndarray) -> List[np.ndarray]:
        """Pr√©traite la r√©gion de la plaque avec diff√©rentes m√©thodes.
        
        Args:
            plate_region (np.ndarray): R√©gion de l'image contenant la plaque
            
        Returns:
            List[np.ndarray]: Liste des versions pr√©trait√©es de l'image
        """
        try:
            # Version originale
            processed_regions = [plate_region]
            
            # Version sans ombres
            no_shadows = self.remove_shadows(plate_region)
            processed_regions.append(no_shadows)
            
            # Version am√©lior√©e
            enhanced = self.enhance_plate_region(plate_region)
            if enhanced is not None:
                processed_regions.append(enhanced)
            
            # Version redress√©e
            deskewed = self.correct_skew(enhanced if enhanced is not None else plate_region)
            if deskewed is not None:
                processed_regions.append(deskewed)
            
            # Version en niveaux de gris
            gray = cv2.cvtColor(plate_region, cv2.COLOR_BGR2GRAY)
            processed_regions.append(cv2.cvtColor(gray, cv2.COLOR_GRAY2BGR))
            
            # Version binaris√©e
            _, binary = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
            processed_regions.append(cv2.cvtColor(binary, cv2.COLOR_GRAY2BGR))
            
            return processed_regions
            
        except Exception as e:
            print(f"Erreur lors du pr√©traitement: {str(e)}")
            return [plate_region]  # Retourner l'image originale en cas d'erreur

    def process_tunisian_plate(self, text: str) -> Tuple[bool, str]:
        """Traite sp√©cifiquement les plaques tunisiennes
        
        Args:
            text (str): Texte √† traiter
            
        Returns:
            Tuple[bool, str]: (True, num√©ro) si plaque valide, (False, "") sinon
        """
        try:
            print(f"         ‚îî‚îÄ Analyse du texte: {text}")
            
            # Extraire tous les chiffres
            all_numbers = re.findall(r'\d+', text)
            if not all_numbers:
                print("         ‚îî‚îÄ ‚ùå Aucun chiffre trouv√©")
                return False, ""
                
            # V√©rifier la pr√©sence de texte arabe et sa position
            parts = text.split()
            arabic_pos = -1
            arabic_variations = ['ÿ™ŸàŸÜÿ≥', 'ÿ™ŸàŸÜŸÜ', 'ÿ™ŸàŸÜ']
            
            # Chercher les variations du mot "Tunisie" en arabe
            for i, part in enumerate(parts):
                for variation in arabic_variations:
                    if any(c in part for c in variation):
                        arabic_pos = i
                        break
                if arabic_pos != -1:
                    break
            
            if arabic_pos == -1:
                print("         ‚îî‚îÄ ‚ùå Position du texte arabe non trouv√©e")
                return False, ""
                return False, ""
            
            # R√©cup√©rer les nombres avec leur position et confiance
            number_candidates = []
            
            for i, part in enumerate(parts):
                numbers = re.findall(r'\d+', part)
                for num in numbers:
                    if 3 <= len(num) <= 4:  # Filtrer les nombres valides
                        position = 'before' if i < arabic_pos else 'after' if i > arabic_pos else 'middle'
                        if position != 'middle':
                            number_candidates.append({
                                'number': num,
                                'position': position,
                                'confidence': 1.0 if len(num) == 4 else 0.9  # Favoriser les nombres √† 4 chiffres
                            })
            
            if not number_candidates:
                print("         ‚îî‚îÄ ‚ùå Aucun nombre valide trouv√©")
                return False, ""
            
            # S√©parer les nombres avant et apr√®s
            before_numbers = [c for c in number_candidates if c['position'] == 'before']
            after_numbers = [c for c in number_candidates if c['position'] == 'after']
            
            # Si nous n'avons pas de nombre avant mais deux nombres apr√®s,
            # consid√©rer le premier comme √©tant avant
            if not before_numbers and len(after_numbers) >= 2:
                # Trier par position dans le texte
                after_numbers.sort(key=lambda x: parts.index(x['number']))
                before_numbers = [after_numbers.pop(0)]
            
            # Si nous n'avons toujours pas la bonne configuration
            if len(before_numbers) != 1 or len(after_numbers) != 1:
                print("         ‚îî‚îÄ ‚ùå Format invalide: il faut exactement un nombre avant et apr√®s ÿ™ŸàŸÜÿ≥")
                return False, ""
            
            # Prendre les meilleurs candidats
            first_part = before_numbers[0]['number']
            second_part = after_numbers[0]['number']
            
            # Formater la plaque
            formatted_plate = f"{first_part} ÿ™ŸàŸÜÿ≥ {second_part}"
            print(f"         ‚îî‚îÄ ‚úÖ Segmentation: {formatted_plate}")
            return True, formatted_plate
            
        except Exception as e:
            print(f"Erreur lors du traitement de la plaque tunisienne: {str(e)}")
            return False, ""

    def format_plate_number(self, first_part: str, second_part: str) -> str:
        """Formate le num√©ro de plaque avec le texte arabe au milieu.
        
        Args:
            first_part (str): Premi√®re partie du num√©ro (3 chiffres)
            second_part (str): Deuxi√®me partie du num√©ro (4 chiffres)
            
        Returns:
            str: Num√©ro de plaque format√©
        """
        try:
            # V√©rifier que les parties ont la bonne longueur
            if len(first_part) != 3 or len(second_part) != 4:
                print(f"         ‚îî‚îÄ ‚ùå Format invalide: {first_part} ÿ™ŸàŸÜÿ≥ {second_part}")
                return ""
            
            # Ne pas changer l'ordre des num√©ros, garder l'ordre original
            # La premi√®re partie doit √™tre 3 chiffres, la deuxi√®me 4 chiffres
            # Utiliser arabic_reshaper pour g√©rer correctement le texte arabe
            reshaped_text = arabic_reshaper.reshape('ÿ™ŸàŸÜÿ≥')
            bidi_text = get_display(reshaped_text)
            return f"{first_part} {bidi_text} {second_part}"
        except Exception as e:
            print(f"Erreur lors du formatage de la plaque: {str(e)}")
            return f"{first_part} ÿ™ŸàŸÜÿ≥ {second_part}"
            
    def clean_text(self, text: str) -> str:
        """Nettoie le texte d√©tect√©.
        
        Args:
            text (str): Texte √† nettoyer
            
        Returns:
            str: Texte nettoy√©
        """
        try:
            # Supprimer les espaces et caract√®res sp√©ciaux
            text = re.sub(r'[^0-9ÿ™ŸàŸÜÿ≥]', '', text)
            
            # Convertir les chiffres arabes en chiffres latins si n√©cessaire
            arabic_to_latin = {
                'Ÿ†': '0', 'Ÿ°': '1', 'Ÿ¢': '2', 'Ÿ£': '3', 'Ÿ§': '4',
                'Ÿ•': '5', 'Ÿ¶': '6', 'Ÿß': '7', 'Ÿ®': '8', 'Ÿ©': '9'
            }
            for ar, lat in arabic_to_latin.items():
                text = text.replace(ar, lat)
                
            return text
            
        except Exception as e:
            print(f"Erreur lors du nettoyage du texte: {str(e)}")
            return text  # Retourner le texte original en cas d'erreur

    def detect_and_read_plate(self, image_path: str):
        """D√©tecte et lit une plaque d'immatriculation dans l'image.

        Args:
            image_path (str): Chemin vers l'image √† analyser

        Returns:
            str: Num√©ro de plaque d√©tect√© ou None si aucune plaque n'est trouv√©e
        """
        try:
            print(f"\nüîç Analyse de l'image: {image_path}")
            
            # Lire l'image
            print("\n‚åõ Lecture de l'image...")
            img = cv2.imread(image_path)
            if img is None:
                print(f"\n‚ùå Impossible de lire l'image: {image_path}")
                print("‚ÑπÔ∏è V√©rifiez que:")
                print("   1. Le chemin de l'image est correct")
                print("   2. L'image existe et est accessible")
                print("   3. L'image est dans un format support√© (JPG, PNG)")
                return None
                
            h, w = img.shape[:2]
            print(f"‚úÖ Image charg√©e avec succ√®s ({w}x{h} pixels)")
            
            # Redimensionner l'image si n√©cessaire
            img = self.resize_image(img)
            
            # Am√©liorer la qualit√© de l'image
            img = cv2.fastNlMeansDenoisingColored(img, None, 10, 10, 7, 21)  # R√©duction du bruit
            
            # D√©tecter les plaques avec YOLOv8
            print("\nüîç D√©tection des plaques avec YOLOv8...")
            try:
                results = self.model(img, conf=0.3)[0]  # R√©duire le seuil de confiance
                
                if len(results.boxes) == 0:
                    print("‚ùå Aucune plaque d√©tect√©e par YOLOv8")
                    return None
                    
                print(f"‚úÖ {len(results.boxes)} plaque(s) d√©tect√©e(s)")
                
            except Exception as model_error:
                print(f"‚ùå Erreur lors de la d√©tection YOLOv8: {str(model_error)}")
                print("‚ÑπÔ∏è V√©rifiez que:")
                print("   1. Le mod√®le est correctement charg√© et compatible")
                print("   2. Vous avez les bonnes d√©pendances install√©es")
                return None
                
            best_text = None
            highest_conf = 0
            
            # Variables pour stocker les meilleurs r√©sultats partiels
            best_first_part = None
            best_second_part = None
            best_first_conf = 0
            best_second_conf = 0
            
            # Traiter chaque d√©tection
            print("\nüîç Analyse des plaques d√©tect√©es...")
            for i, result in enumerate(results.boxes.data):
                x1, y1, x2, y2, conf, _ = result
                print(f"\nüìå Plaque #{i+1}:")
                print(f"   ‚îî‚îÄ Confiance: {conf:.2f}")
                
                if conf < self.confidence_threshold:
                    print(f"   ‚îî‚îÄ ‚ùå Confiance trop faible (< {self.confidence_threshold})")
                    continue
                    
                print("   ‚îî‚îÄ ‚úÖ Confiance suffisante")
                
                # Extraire la r√©gion de la plaque avec une marge
                print("   ‚îî‚îÄ Extraction de la r√©gion...")
                margin = 5
                y1, y2 = max(0, int(y1)-margin), min(img.shape[0], int(y2)+margin)
                x1, x2 = max(0, int(x1)-margin), min(img.shape[1], int(x2)+margin)
                plate_region = img[y1:y2, x1:x2]
                h, w = plate_region.shape[:2]
                print(f"   ‚îî‚îÄ Dimensions: {w}x{h} pixels")
                
                # V√©rifier les dimensions
                if w < 100 or h < 30:  # Ignorer les r√©gions trop petites
                    print(f"   ‚îî‚îÄ ‚ùå R√©gion trop petite ({w}x{h} < 100x30)")
                    continue
                    
                print("   ‚îî‚îÄ ‚úÖ Dimensions suffisantes")
                    
                ratio = w / h
                print(f"   ‚îî‚îÄ Ratio largeur/hauteur: {ratio:.2f}")
                
                if not (self.min_plate_ratio <= ratio <= self.max_plate_ratio):
                    print(f"   ‚îî‚îÄ ‚ùå Ratio invalide (doit √™tre entre {self.min_plate_ratio} et {self.max_plate_ratio})")
                    continue
                    
                print("   ‚îî‚îÄ ‚úÖ Ratio valide")
                
                # Pr√©traiter la r√©gion de la plaque
                print("   ‚îî‚îÄ Pr√©traitement de l'image...")
                processed_regions = self.preprocess_plate(plate_region)
                print(f"   ‚îî‚îÄ {len(processed_regions)} versions pr√©trait√©es g√©n√©r√©es")
                
                # Essayer l'OCR sur chaque version pr√©trait√©e
                print("   ‚îî‚îÄ Tentative de lecture OCR...")
                for i, processed_plate in enumerate(processed_regions):
                    print(f"      ‚îî‚îÄ Version #{i+1}:")
                    try:
                        # Configuration optimis√©e pour les plaques tunisiennes
                        ocr_results = self.reader.readtext(
                            processed_plate,
                            allowlist='0123456789ÿ™ŸàŸÜÿ≥ ',
                            detail=1,
                            text_threshold=0.5,
                            link_threshold=0.4,
                            low_text=0.4
                        )
                        
                        if not ocr_results:
                            print("         ‚îî‚îÄ ‚ùå Aucun texte d√©tect√©")
                            continue
                            
                        print(f"         ‚îî‚îÄ ‚úÖ {len(ocr_results)} texte(s) d√©tect√©(s)")
                        
                        # Traiter chaque r√©sultat OCR
                        for text_result in ocr_results:
                            try:
                                text = text_result[1]
                                conf = text_result[2]
                                print(f"         ‚îî‚îÄ Texte d√©tect√©: {text} (confiance: {conf:.2f})")
                                
                                # Nettoyer le texte
                                cleaned_text = self.clean_text(text)
                                print(f"         ‚îî‚îÄ Texte nettoy√©: {cleaned_text}")
                                print(f"         ‚îî‚îÄ Analyse du texte: {cleaned_text}")
                                
                                # V√©rifier la pr√©sence du texte arabe 'ÿ™ŸàŸÜÿ≥'
                                has_tun = 'ÿ™ŸàŸÜÿ≥' in text
                                if has_tun:
                                    print("         ‚îî‚îÄ ‚úÖ Texte arabe 'TUN' trouv√©")
                                else:
                                    print("         ‚îî‚îÄ ‚ùå Texte arabe 'TUN' non trouv√©")
                                
                                # Analyser les chiffres dans le texte
                                numbers = ''.join(c for c in text if c.isdigit())
                                
                                # Si le texte contient ÿ™ŸàŸÜÿ≥ ou ÿ™ŸàŸÜ, traiter comme un format complet
                                if has_tun:
                                    # Normaliser le texte arabe
                                    text = text.replace('ÿ™ŸàŸÜ', 'ÿ™ŸàŸÜÿ≥')
                                    
                                    # Extraire les nombres avant et apr√®s ÿ™ŸàŸÜÿ≥
                                    parts = text.split('ÿ™ŸàŸÜÿ≥')
                                    if len(parts) == 2:
                                        # Extraire les chiffres de chaque partie
                                        first_digits = ''.join(c for c in parts[0] if c.isdigit())
                                        second_digits = ''.join(c for c in parts[1] if c.isdigit())
                                        
                                        # V√©rifier et formater la premi√®re partie (3 chiffres)
                                        if len(first_digits) == 3:
                                            first_part = first_digits
                                        else:
                                            continue
                                            
                                        # V√©rifier et formater la deuxi√®me partie (4 chiffres)
                                        if len(second_digits) == 4:
                                            second_part = second_digits
                                        else:
                                            continue
                                        
                                        # V√©rifier si les deux parties sont valides
                                        if first_part and second_part:
                                            if len(first_part) == 3 and len(second_part) == 4:
                                                # Formater la plaque avec le texte arabe
                                                formatted_plate = f"{first_part} ÿ™ŸàŸÜÿ≥ {second_part}"
                                                print(f"         ‚îî‚îÄ ‚úÖ Format avec TUN d√©tect√©: {formatted_plate}")
                                                if conf > highest_conf:
                                                    best_text = formatted_plate
                                                    highest_conf = conf
                                                    print(f"         ‚îî‚îÄ ‚úÖ Nouveau meilleur r√©sultat complet: {best_text} (confiance: {conf:.2f})")
                                # Si pas de texte arabe mais assez de chiffres pour une plaque
                                elif len(numbers) >= 7:
                                    # Extraire les chiffres
                                    digits = ''.join(c for c in text if c.isdigit())
                                    if len(digits) >= 7:
                                        # Chercher un pattern valide (3+4 chiffres)
                                        match = re.search(r'(\d{3})(\d{4})', digits)
                                        if match:
                                            first_part = match.group(1)
                                            second_part = match.group(2)
                                        
                                        # V√©rifier que les parties sont valides
                                        if len(first_part) == 3 and len(second_part) == 4:
                                            formatted_plate = f"{first_part} ÿ™ŸàŸÜÿ≥ {second_part}"
                                            print(f"         ‚îî‚îÄ ‚úÖ Format sans TUN d√©tect√©: {formatted_plate}")
                                            if conf > highest_conf:
                                                best_text = formatted_plate
                                                highest_conf = conf
                                                print(f"         ‚îî‚îÄ ‚úÖ Nouveau meilleur r√©sultat: {best_text} (confiance: {conf:.2f})")
                                
                                # Sinon, essayer de d√©tecter les parties individuelles
                                elif len(numbers) >= 3:
                                    # V√©rifier si c'est une premi√®re partie (exactement 3 chiffres)
                                    if len(numbers) == 3:
                                        if conf > best_first_conf:
                                            best_first_part = numbers
                                            best_first_conf = conf
                                            print(f"         ‚îî‚îÄ ‚úÖ Premi√®re partie trouv√©e: {numbers} (confiance: {conf:.2f})")
                                    
                                    # V√©rifier si c'est une deuxi√®me partie (exactement 4 chiffres)
                                    elif len(numbers) == 4:
                                        if conf > best_second_conf:
                                            best_second_part = numbers
                                            best_second_conf = conf
                                            print(f"         ‚îî‚îÄ ‚úÖ Deuxi√®me partie trouv√©e: {numbers} (confiance: {conf:.2f})")
                            except Exception as detail_error:
                                print(f"         ‚îî‚îÄ ‚ùå Erreur lors du traitement: {str(detail_error)}")
                                continue
                    except Exception as ocr_error:
                        print(f"         ‚îî‚îÄ ‚ùå Erreur OCR: {str(ocr_error)}")
                        continue
                
                # Apr√®s avoir trait√© toutes les versions pr√©trait√©es, essayer de combiner les parties
                if best_first_part and best_second_part:
                    # Formater la plaque de mani√®re consistante avec le texte arabe dans le bon sens
                    formatted_plate = self.format_plate_number(best_first_part, best_second_part)
                    combined_conf = (best_first_conf + best_second_conf) / 2
                    if combined_conf > highest_conf:
                        best_text = formatted_plate
                        highest_conf = combined_conf
                        print(f"\n‚úÖ Plaque compl√®te reconstruite: {best_text}")
                        print(f"   ‚îî‚îÄ Premi√®re partie: {best_first_part} (confiance: {best_first_conf:.2f})")
                        print(f"   ‚îî‚îÄ Deuxi√®me partie: {best_second_part} (confiance: {best_second_conf:.2f})")
                        print(f"   ‚îî‚îÄ Confiance moyenne: {combined_conf:.2f}")
                
                # Si nous avons un r√©sultat, l'enregistrer
                if best_text:
                    try:
                        output_dir = os.path.join(os.path.dirname(image_path), "detected")
                        os.makedirs(output_dir, exist_ok=True)
                        output_path = os.path.join(output_dir, f"detected_{os.path.basename(image_path)}")
                        
                        # Dessiner les d√©tections sur l'image
                        for result in results.boxes.data:
                            x1, y1, x2, y2, conf, _ = result
                            if conf > self.confidence_threshold:
                                cv2.rectangle(img, (int(x1), int(y1)), (int(x2), int(y2)), (0, 255, 0), 2)
                                
                        cv2.imwrite(output_path, img)
                        print(f"\n‚úÖ Plaque d√©tect√©e: {best_text} (confiance: {highest_conf:.2f})")
                        print(f"   ‚îî‚îÄ Image sauvegard√©e: {output_path}")
                    except Exception as e:
                        print(f"   ‚îî‚îÄ ‚ùå Erreur lors de la sauvegarde de l'image: {str(e)}")
                else:
                    print("\n‚ùå Aucune plaque valide d√©tect√©e")
                    
                return best_text
            
            print("‚ùå Aucune plaque valide d√©tect√©e")
            return None

        except Exception as e:
            print(f"‚ùå Erreur dans detect_and_read_plate: {str(e)}")
            return None

def test_model():
    """Test le mod√®le YOLOv8 et affiche des informations d√©taill√©es."""
    print("\nüîç Test du syst√®me de d√©tection de plaques...")
    
    try:
        # Initialiser le d√©tecteur
        detector = ParkingDetector()
        print("\n‚úÖ Initialisation r√©ussie!")
        
        # Afficher les informations sur le mod√®le
        print("\n‚ÑπÔ∏è Informations sur le mod√®le:")
        print(f"   üìÅ Chemin du mod√®le: {detector.model_path}")
        print(f"   üíª Device: {detector.device}")
        print(f"   üéØ Seuil de confiance: {detector.confidence_threshold}")
        
        # V√©rifier si une image de test existe
        test_image = os.path.join(os.path.dirname(__file__), "test_image.jpg")
        
        if os.path.exists(test_image):
            print("\nüì∑ Test avec l'image: test_image.jpg")
            plate_number = detector.detect_and_read_plate(test_image)
            
            if plate_number:
                print("\n‚úÖ Test r√©ussi!")
                print(f"   üìç Plaque d√©tect√©e: {plate_number}")
            else:
                print("\n‚ö†Ô∏è Test √©chou√©")
                print("   ‚ÑπÔ∏è V√©rifiez que:")
                print("      1. L'image contient une plaque d'immatriculation claire")
                print("      2. La plaque est bien visible et lisible")
                print("      3. L'image est de bonne qualit√©")
        else:
            print("\n‚ö†Ô∏è Aucune image de test trouv√©e")
            print("üí° Pour tester le mod√®le:")
            print("   1. Ajoutez une image nomm√©e 'test_image.jpg' dans le dossier du projet")
            print("   2. L'image doit contenir une plaque d'immatriculation claire")
            
    except Exception as e:
        print(f"\n‚ùå ERREUR lors du test: {str(e)}")

        
        # Chercher une image de test
        test_images = ["test_image.jpg", "test.jpg", "sample.jpg"]
        test_image = None
        
        for img in test_images:
            if os.path.exists(img):
                test_image = img
                break
        
        if test_image:
            print(f"\nüñºÔ∏è Test avec l'image: {test_image}")
            result = detector.detect_and_read_plate(test_image)
            if result:
                print(f"\n‚úÖ Test r√©ussi!")
                print(f"   üìù Plaque d√©tect√©e: {result}")
            else:
                print(f"\n‚ö†Ô∏è Aucune plaque d√©tect√©e dans l'image de test")
                print("   üí° Suggestions:")
                print("      1. V√©rifiez que l'image contient une plaque claire")
                print("      2. Ajustez le seuil de confiance si n√©cessaire")
                print("      3. V√©rifiez que le mod√®le a √©t√© entra√Æn√© sur des images similaires")
        else:
            print("\n‚ö†Ô∏è Aucune image de test trouv√©e")
            print("üí° Pour tester le mod√®le:")
            print("   1. Ajoutez une image nomm√©e 'test_image.jpg' dans le dossier du projet")
            print("   2. L'image doit contenir une plaque d'immatriculation claire")
        
    except Exception as e:
        print(f"\n‚ùå ERREUR lors du test: {str(e)}")
        print("\n‚ÑπÔ∏è V√©rifiez que:")
        print("   1. Le mod√®le YOLOv8 est correctement install√©")
        print("   2. Le fichier best.pt est un mod√®le valide")
        print("   3. Vous avez les bonnes d√©pendances install√©es")
        raise

def main():
    """Fonction principale"""
    test_model()

if __name__ == '__main__':
    main()
